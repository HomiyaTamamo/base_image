const imageInput=document.getElementById("imageInput"),encryptedImageInput=document.getElementById("encryptedImageInput"),encryptBtn=document.getElementById("encryptBtn"),decryptBtn=document.getElementById("decryptBtn"),encryptedImagesContainer=document.getElementById("encryptedImagesContainer"),downloadLinksContainer=document.getElementById("downloadLinksContainer"),ctx=document.createElement("canvas").getContext("2d");let originalImagesData=[],encryptedImagesData=[],imageFiles=[],encryptedImageFiles=[];function logisticMap(e,t){return t*e*(1-e)}function generateChaosSequence(e,t,a){let n=[],r=e/2147483647;for(let e=0;e<t;e++)r=logisticMap(r,a),n.push(Math.floor(256*r));return n}function displayEncryptedImages(){encryptedImagesContainer.innerHTML="",encryptedImagesData.forEach((({dataURL:e,fileName:t},a)=>{const n=document.createElement("img");n.src=e,n.style.display="block",n.alt=`Encrypted Image ${a+1} (${t})`,encryptedImagesContainer.appendChild(n)}));const e=document.createElement("div");encryptedImagesData.forEach((({dataURL:t,fileName:a},n)=>{const r=document.createElement("a");r.href=t,r.download=`encrypted_${a}`,r.textContent=`Download Encrypted ${a}`,r.style.display="block",e.appendChild(r)})),downloadLinksContainer.innerHTML="",downloadLinksContainer.appendChild(e),downloadLinksContainer.style.display="block"}encryptBtn.addEventListener("click",(()=>{if(!imageInput.files.length)return void alert("Please select images first!");const e=parseInt(prompt("Enter an encryption key (integer):"));if(isNaN(e))return void alert("Please enter a valid encryption key!");const t=3.99;imageFiles=Array.from(imageInput.files),encryptedImagesData=[],encryptedImagesContainer.innerHTML="";let a=0;imageFiles.forEach((n=>{const r=new FileReader;r.onload=r=>{const c=new Image;c.onload=()=>{const r=c.width,d=c.height;ctx.canvas.width=r,ctx.canvas.height=d,ctx.drawImage(c,0,0,r,d);const o=ctx.getImageData(0,0,r,d),i=ctx.createImageData(r,d),s=generateChaosSequence(e,r*d,t),l=generateChaosSequence(e+1,r*d,t),g=generateChaosSequence(e+2,r*d,t);for(let e=0;e<d;e++)for(let t=0;t<r;t++){const a=4*(e*r+t),n=o.data[a],c=o.data[a+1],d=o.data[a+2],m=n^s[e*r+t],p=c^l[e*r+t],y=d^g[e*r+t];i.data[a]=m,i.data[a+1]=p,i.data[a+2]=y,i.data[a+3]=255}ctx.putImageData(i,0,0);const m=ctx.canvas.toDataURL("image/jpg");encryptedImagesData.push({dataURL:m,fileName:n.name}),a++,a===imageFiles.length&&displayEncryptedImages()},c.src=r.target.result},r.readAsDataURL(n)}))})),decryptBtn.addEventListener("click",(()=>{if(!encryptedImageInput.files.length)return void alert("Please upload encrypted images first!");const e=parseInt(prompt("Enter the decryption key (integer):"));if(isNaN(e))return void alert("Please enter a valid decryption key!");const t=3.99;encryptedImageFiles=Array.from(encryptedImageInput.files),encryptedImagesData=[],encryptedImagesContainer.innerHTML="";let a=0;encryptedImageFiles.forEach((n=>{const r=new FileReader;r.onload=n=>{const r=new Image;r.onload=()=>{const n=r.width,c=r.height;ctx.canvas.width=n,ctx.canvas.height=c,ctx.drawImage(r,0,0,n,c);const d=ctx.getImageData(0,0,n,c),o=ctx.createImageData(n,c),i=generateChaosSequence(e,n*c,t),s=generateChaosSequence(e+1,n*c,t),l=generateChaosSequence(e+2,n*c,t);for(let e=0;e<c;e++)for(let t=0;t<n;t++){const a=4*(e*n+t),r=d.data[a],c=d.data[a+1],g=d.data[a+2],m=r^i[e*n+t],p=c^s[e*n+t],y=g^l[e*n+t];o.data[a]=m,o.data[a+1]=p,o.data[a+2]=y,o.data[a+3]=255}ctx.putImageData(o,0,0);const g=ctx.canvas.toDataURL("image/jpg"),m=document.createElement("img");m.src=g,m.style.display="block",m.alt=`Decrypted Image ${a+1}`,encryptedImagesContainer.appendChild(m),a++},r.src=n.target.result},r.readAsDataURL(n)}))}));